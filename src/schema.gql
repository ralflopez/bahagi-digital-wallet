# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input CashInInput {
  amount: Float!
  currencyId: String!
  paymentIntentId: String!
  paymentServiceId: String!
}

input CashOutInput {
  amount: Float!
  currencyId: String!
  paymentServiceId: String!
}

type Country {
  currency: Currency!
  id: ID!
  mobileCode: String!
  name: String!
}

input CreateCountryInput {
  """ID from currency schema"""
  currencyId: String!
  id: String!

  """Countrys area code (e.g. +63 for Philippines)"""
  mobileCode: String!
  name: String!
}

input CreateCurrencyInput {
  id: String!
  name: String!
  symbol: String!
}

input CreateInternalFundTransfer {
  amount: Float!
  currencyId: String!
  receiverId: String!
  senderId: String!
}

input CreatePaymentServiceInput {
  base_fee: Float
  company: String!
  method: PaymentServiceMethod!
  minimum_fee: Float!
  name: String!
  percent_fee: Float!
  type: PaymentServiceType!
}

type Currency {
  id: ID!
  name: String!
  symbol: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type ExternalFundTransfer {
  details: FundTransfer!
  id: ID!
  method: ExternalFundTransferMethod!
  user: User!
}

enum ExternalFundTransferMethod {
  CASH_IN
  CASH_OUT
}

type FundTransfer {
  amount: Float!
  currency: Currency!
  fee: Float!
  id: ID!
  status: FundTransferStatus!
}

enum FundTransferStatus {
  FAILED
  PROCESSING
  SUCCESS
}

type InternalFundTransfer {
  details: FundTransfer!
  id: ID!
  receiver: User!
  sender: User!
}

"""Required arguments to log in the user"""
input LogInInput {
  email: String!
  password: String!
}

type Mutation {
  """
  #### Description
      
  * _Requires authentication_
      
  * Creates a record for incoming user funds from external source (e.g credit card).
      
  * Status will be set to PROCESSING.
  """
  cashIn(cashInInput: CashInInput!): ExternalFundTransfer!

  """
  #### Description
      
  * _Requires authentication_
      
  * Creates a record for outgoing user funds.
      
  * Status will be set to PROCESSING.
  """
  cashOut(cashOutInput: CashOutInput!): ExternalFundTransfer!

  """
  #### Description
      
  * _Requires admin privileges_
      
  * Creates a new country.
  """
  createCountry(createCountryInput: CreateCountryInput!): Country!

  """
  #### Description
      
  * _Requires admin privileges_
      
  * Creates a new currency.
  """
  createCurrency(createCurrencyInput: CreateCurrencyInput!): Currency!

  """
  #### Description
      
  * _Requires authentication_
      
  * Creates a record for a fund transfer between two users.
  """
  createInternalFundTransfer(createInternalFundTransferInput: CreateInternalFundTransfer!): InternalFundTransfer!

  """
  #### Description
      
  * _Requires admin privileges_
      
  * Creates a new payment service.
  """
  createPaymentService(createPaymentGatewayInput: CreatePaymentServiceInput!): PaymentService!

  """
  #### Description
      
  * _Requires authentication_
      
  * Calls paymongo api to create a payment intent (tells paymongo that you are expecting a payment).
  """
  createPaymongoPaymentIntent(paymentIntentInput: PaymentIntentInput!): PaymentIntentResult!

  """
  #### Description
      
  Logs in the user using session authentication. 
      
  #### Example
      
  ```
      {
        email: "demo@email.com", 
        password: "password"
      }
  """
  logIn(logIninput: LogInInput!): User!

  """
  #### Description
      
  * _Requires admin privileges_
      
  * Deletes a country.
  """
  removeCountry(id: String!): Int!

  """
  #### Description
      
  * _Requires admin privileges_
      
  * Deletes a country.
  """
  removeCurrency(id: String!): Int!

  """
  #### Description
      
  * _Requires admin privileges_
      
  * Deletes a cash in / cash out record.
  """
  removeExternalFundTransfer(id: String!): Int!

  """
  #### Description
      
  * _Requires admin privileges_
      
  * Deletes a payment service.
  """
  removePaymentService(id: String!): Int!

  """
  #### Description
      
  * _Requires admin privileges_
      
  * Deltes a user.
  """
  removeUser(id: String!): String!

  """
  #### Description
      
  * _Requires authentication_
      
  * Sends money from the logged in user to another user
  """
  sendMoney(sendMoneyInput: SendMoneyInput!): InternalFundTransfer!

  """
  #### Description
      
  Creates and logs in the user using session authentication. 
      
  #### Example
      
  ```
      {
        email: "newUser@email.com", 
        name: "name"
        password: "password",
        phoneNumber: "+639271234567",
        countryId: "ph'
      }
  """
  signUp(signUpInput: SignUpInput!): User!

  """
  #### Description
      
  * _Requires authentication_
      
  * Updates the cashIn status.
  """
  updateCashInStatus(updateExternalFundTransferStatusInput: UpdateExternalFundTransferStatusInput!): ExternalFundTransfer!

  """
  #### Description
      
  * _Requires authentication_
      
  * Updaates the cashOut status.
  """
  updateCashOutStatus(updateExternalFundTransferStatusInput: UpdateExternalFundTransferStatusInput!): ExternalFundTransfer!

  """
  #### Description
      
  * _Requires admin privileges_
      
  * Updates user information.
  """
  updateUser(updateUserInput: UpdateUserInput!): User!
}

input PaymentIntentInput {
  """Amount should be in full currencies (e.g Pesos instead of cents)"""
  amount: Float!
}

type PaymentIntentResult {
  clientKey: String!
}

type PaymentService {
  base_fee: Float!
  company: String!
  id: ID!
  method: PaymentServiceMethod!
  minimum_fee: Float!
  name: String!
  percent_fee: Float!
  type: PaymentServiceType!
}

enum PaymentServiceMethod {
  ANY
  CASH_IN
  CASH_OUT
}

enum PaymentServiceType {
  BANK
  OTC
  SERVICE
}

type Query {
  """
  #### Description
      
  Returns a list of available countries.
  """
  countries: [Country!]!

  """
  #### Description
      
  Returns a country given its ID.
  """
  country(id: String!): Country!

  """
  #### Description
      
  Returns a list of available currencies.
  """
  currencies: [Currency!]!

  """
  #### Description
      Returns a currency given its ID
  """
  currency(id: String!): Currency!

  """
  #### Description
      
  * _Requires authentication_
      
  * Returns a cash in / cash out record given an ID.
  """
  externalFundTransfer(id: String!): ExternalFundTransfer!

  """
  #### Description
      
  * _Requires authentication_
      
  * Returns a list of all the cash in and cash out transactions.
  """
  externalFundTransfers: [ExternalFundTransfer!]!

  """
  #### Description
      
  * _Requires admin privileges_
      
  * Returns all the internal fund transfer records
  """
  internalFundTransfers: [InternalFundTransfer!]!

  """
  #### Description
      
  * _Requires authentication_
      
  * Returns the current logged in user.
  """
  myUser: User!

  """
  #### Description
      
  Retuns a payment service given an ID.
  """
  paymentService(id: String!): PaymentService!

  """
  #### Description
      
  Returns all available payment services.
  """
  paymentServices: [PaymentService!]!

  """
  #### Description
      
  * _Requires authentication_
      
  * Returns the total balance of the logged in user.
  """
  totalBalance: Float!

  """
  #### Description
      
  * _Requires authentication_
      
  * Returns a user given an ID.
  """
  user(id: String!): User!

  """
  #### Description
      
  * _Requires admin privileges_
      
  * Returns all user.
  """
  users: [User!]!
}

enum Role {
  ADMIN
  USER
}

input SendMoneyInput {
  amount: Float!
  currencyId: String!
  receiverId: String!
}

"""Required arguments to create a new user"""
input SignUpInput {
  """ID from the country schema"""
  countryId: String!
  email: String!
  name: String!
  password: String!
  phoneNumber: String!
}

input UpdateExternalFundTransferStatusInput {
  id: String!
  status: FundTransferStatus!
}

input UpdateUserInput {
  """ID from the country schema"""
  countryId: String
  email: String!
  id: String!
  name: String!
  password: String!
  phoneNumber: String
}

type User {
  country: Country!
  createdAt: DateTime!
  email: String!
  id: ID!
  name: String!
  role: Role!
}