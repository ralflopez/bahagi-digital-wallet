# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input CashOutInput {
  amount: Float!
  currencyId: String!
  paymentServiceId: String!
}

type Country {
  currency: Currency!
  id: ID!
  mobileCode: String!
  name: String!
}

input CreateCountryInput {
  currencyId: String!
  id: String!
  mobileCode: String!
  name: String!
}

input CreateCurrencyInput {
  id: String!
  name: String!
  symbol: String!
}

input CreateInternalFundTransfer {
  amount: Float!
  currencyId: String!
  receiverId: String!
  senderId: String!
}

input CreatePaymentServiceInput {
  base_fee: Float
  company: String!
  minimum_fee: Float!
  name: String!
  percent_fee: Float!
  type: PaymentServiceType!
}

input CreateUserInput {
  countryId: String!
  email: String!
  name: String!
  password: String!
  phoneNumber: String!
}

type Currency {
  id: ID!
  name: String!
  symbol: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type ExternalFundTransfer {
  details: FundTransfer!
  id: ID!
  method: ExternalFundTransferMethod!
  user: User!
}

enum ExternalFundTransferMethod {
  CASH_IN
  CASH_OUT
}

type FundTransfer {
  amount: Float!
  currency: Currency!
  fee: Float!
  id: ID!
  status: FundTransferStatus!
}

enum FundTransferStatus {
  FAILED
  PROCESSING
  SUCCESS
}

type InternalFundTransfer {
  details: FundTransfer!
  id: ID!
  receiver: User!
  sender: User!
}

input LogInInput {
  email: String!
  password: String!
}

type Mutation {
  cashOut(cashOutInput: CashOutInput!): ExternalFundTransfer!
  createCountry(createCountryInput: CreateCountryInput!): Country!
  createCurrency(createCurrencyInput: CreateCurrencyInput!): Currency!
  createInternalFundTransfer(createInternalFundTransferInput: CreateInternalFundTransfer!): InternalFundTransfer!
  createPaymentService(createPaymentGatewayInput: CreatePaymentServiceInput!): PaymentService!
  createPaymongoPaymentIntent(paymentIntentInput: PaymentIntentInput!): PaymentIntentResult!
  createUser(createUserInput: CreateUserInput!): User!
  logIn(logIninput: LogInInput!): User!
  removeCountry(id: String!): Int!
  removeCurrency(id: String!): Int!
  removeExternalFundTransfer(id: String!): Int!
  removePaymentService(id: String!): Int!
  removeUser(id: String!): String!
  sendMoney(sendMoneyInput: SendMoneyInput!): InternalFundTransfer!
  signUp(signUpInput: SignUpInput!): User!
  updateUser(updateUserInput: UpdateUserInput!): User!
}

input PaymentIntentInput {
  amount: Float!
}

type PaymentIntentResult {
  clientKey: String!
}

type PaymentService {
  base_fee: Float!
  company: String!
  id: ID!
  minimum_fee: Float!
  name: String!
  percent_fee: Float!
  type: PaymentServiceType!
}

enum PaymentServiceType {
  BANK
  OTC
  SERVICE
}

type Query {
  countries: [Country!]!
  country(id: String!): Country!
  currencies: [Currency!]!
  currency(id: String!): Currency!
  externalFundTransfer(id: String!): ExternalFundTransfer!
  externalFundTransfers: [ExternalFundTransfer!]!
  internalFundTransfers: [InternalFundTransfer!]!
  paymentService(id: String!): PaymentService!
  paymentServices: [PaymentService!]!
  totalBalance: String!
  user(id: String!): User!
  users: [User!]!
}

enum Role {
  ADMIN
  USER
}

input SendMoneyInput {
  amount: Float!
  currencyId: String!
  receiverId: String!
}

input SignUpInput {
  countryId: String!
  email: String!
  name: String!
  password: String!
  phoneNumber: String!
}

input UpdateUserInput {
  countryId: String
  email: String!
  id: String!
  name: String!
  password: String!
  phoneNumber: String
}

type User {
  country: Country!
  createdAt: DateTime!
  email: String!
  id: ID!
  name: String!
  role: Role!
}